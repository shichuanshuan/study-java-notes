public class BitOperator {
	public static void main(String[] args) {
		// 推导过程
		// 1. 先得到 2 的补码
		//    2 的原码 00000000 0000000 00000000 00000010
		//    2 的补码 00000000 0000000 00000000 00000010 正数原码、反码、补码一样
		// 2. 得到 3 的补码
		//    3 的原码 00000000 0000000 00000000 00000011
		//    3 的补码 00000000 0000000 00000000 00000011
		// 3. 按位 &
		//    2  00000000 0000000 00000000 00000010
		//    3  00000000 0000000 00000000 00000011
		//       00000000 0000000 00000000 00000010  结果是补码，要转换为原码，正数补码就是原码
		// 结果就是 2
		System.out.println(2&3);

		// 推导
		// 1. 先得到 -2 的原码 10000000 00000000 00000000 00000010
		// 2. -2 的反码       11111111 11111111 11111111 11111101
		// 3. -2 的补码       11111111 11111111 11111111 11111110
		// 4. 按位取反        00000000 00000000 00000000 00000001 运算后的补码
		// 5. 转为原码        00000000 00000000 00000000 00000001 正数补码就是原码
		System.out.println(~-2);


		// 推导
		// 1. 得到 2 原/补码  00000000 00000000 0000000 00000010 正数补码也是这个
		// 2. 按位取反操作    11111111 11111111 1111111 11111101
		// 3. 运算后的反码    11111111 11111111 1111111 11111100
		// 4. 运算后的原码    10000000 00000000 00000000 00000011 => -3
		System.out.println(~2);
	}
}